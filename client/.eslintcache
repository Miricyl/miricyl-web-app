[{"/Users/steven/STA/miricyl/client/src/index.js":"1","/Users/steven/STA/miricyl/client/src/App.js":"2","/Users/steven/STA/miricyl/client/src/serviceWorker.js":"3","/Users/steven/STA/miricyl/client/src/components/Navbar.js":"4","/Users/steven/STA/miricyl/client/src/containers/HomePageContainer.js":"5","/Users/steven/STA/miricyl/client/src/components/MultiChoiceQuestion.js":"6","/Users/steven/STA/miricyl/client/src/components/TextBoxQuestion.js":"7","/Users/steven/STA/miricyl/client/src/components/Results.js":"8","/Users/steven/STA/miricyl/client/src/api/GoogleServer.js":"9","/Users/steven/STA/miricyl/client/src/api/nodeServer.js":"10","/Users/steven/STA/miricyl/client/src/telemetry/TelemetryService.js":"11","/Users/steven/STA/miricyl/client/src/telemetry/telemetry-provider.jsx":"12","/Users/steven/STA/miricyl/client/src/api/postcodeServer.js":"13","/Users/steven/STA/miricyl/client/src/components/FlagsProvider.js":"14","/Users/steven/STA/miricyl/client/src/hooks/useFlags.js":"15","/Users/steven/STA/miricyl/client/src/components/SubHeader.js":"16","/Users/steven/STA/miricyl/client/src/components/Header.js":"17","/Users/steven/STA/miricyl/client/src/components/BackButton.js":"18","/Users/steven/STA/miricyl/client/src/components/Filter.js":"19","/Users/steven/STA/miricyl/client/src/firebase.js":"20","/Users/steven/STA/miricyl/client/src/components/FilterSubSection.js":"21"},{"size":503,"mtime":1607860249312,"results":"22","hashOfConfig":"23"},{"size":476,"mtime":1609268658978,"results":"24","hashOfConfig":"23"},{"size":5098,"mtime":1607860249313,"results":"25","hashOfConfig":"23"},{"size":634,"mtime":1609268658983,"results":"26","hashOfConfig":"23"},{"size":7247,"mtime":1609617350386,"results":"27","hashOfConfig":"23"},{"size":1873,"mtime":1609268658982,"results":"28","hashOfConfig":"23"},{"size":1813,"mtime":1609268658985,"results":"29","hashOfConfig":"23"},{"size":14437,"mtime":1609617350384,"results":"30","hashOfConfig":"23"},{"size":142,"mtime":1605563262634,"results":"31","hashOfConfig":"23"},{"size":251,"mtime":1608500231982,"results":"32","hashOfConfig":"23"},{"size":1656,"mtime":1608500546342,"results":"33","hashOfConfig":"23"},{"size":1256,"mtime":1608500546343,"results":"34","hashOfConfig":"23"},{"size":115,"mtime":1609269469816,"results":"35","hashOfConfig":"23"},{"size":1060,"mtime":1609268658981,"results":"36","hashOfConfig":"23"},{"size":201,"mtime":1609268658987,"results":"37","hashOfConfig":"23"},{"size":391,"mtime":1609268658984,"results":"38","hashOfConfig":"23"},{"size":240,"mtime":1609268658981,"results":"39","hashOfConfig":"23"},{"size":287,"mtime":1609268658979,"results":"40","hashOfConfig":"23"},{"size":1348,"mtime":1609617350380,"results":"41","hashOfConfig":"23"},{"size":295,"mtime":1609268658986,"results":"42","hashOfConfig":"23"},{"size":822,"mtime":1609617350382,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1ac0x9w",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/steven/STA/miricyl/client/src/index.js",[],["94","95"],"/Users/steven/STA/miricyl/client/src/App.js",[],"/Users/steven/STA/miricyl/client/src/serviceWorker.js",[],"/Users/steven/STA/miricyl/client/src/components/Navbar.js",[],"/Users/steven/STA/miricyl/client/src/containers/HomePageContainer.js",["96","97","98"],"import React, { useEffect, useState } from \"react\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport { useFlags } from \"../hooks/useFlags\";\nimport nodeServer from \"../api/nodeServer\";\nimport MultiChoiceQuestion from \"../components/MultiChoiceQuestion\";\nimport TextBoxQuestion from \"../components/TextBoxQuestion\";\nimport Results from \"../components/Results\";\nimport { getAppInsights } from \"../telemetry/TelemetryService\";\nimport TelemetryProvider from \"../telemetry/telemetry-provider\";\n\nconst HomePageContainer = ({ history }) => {\n  const [needs, setNeeds] = useState([]);\n  const [supportTypes, setSupportTypes] = useState([]);\n  const [personalisations, setPersonalisations] = useState([]);\n\n  const [charities, setCharities] = useState([]);\n\n  const [postcode, setPostcode] = useState(\"\");\n\n  let appInsights = getAppInsights();\n\n  // const { filter } = useFlags();\n  const onBackClicked = () => {\n    history.goBack();\n  };\n\n  const trackEvent = (type, selected) => {\n    appInsights.trackEvent({\n      page: type,\n      selected: selected,\n    });\n  };\n\n  useEffect(() => {\n    getAllOptionsFromServer();\n  }, []);\n\n  // QUESTION - 1: Needs\n\n  const getAllOptionsFromServer = () => {\n    nodeServer.get(\"/needs\").then((res) => {\n      const needsResponse = res.data;\n      needsResponse.sort((a, b) => a.Need.localeCompare(b.Need));\n      const userNeeds = needsResponse.map((need) => {\n        return { value: need.Need, isSelected: false };\n      });\n      setNeeds(userNeeds);\n    });\n\n    nodeServer\n      .get(\"/charities\")\n      .then((res) => {\n        const foundCharities = res.data;\n        setCharities(foundCharities);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n    nodeServer.get(\"/types\").then((res) => {\n      const supportTypesResponse = res.data;\n\n      const uniqueSupportTypes = [\n        ...new Set(\n          supportTypesResponse.map((supportType) => supportType.UserOption_Type)\n        ),\n      ].map((supportType) => {\n        return { value: supportType, isSelected: false };\n      });\n\n      setSupportTypes(uniqueSupportTypes);\n    });\n\n    nodeServer.get(\"/personalisations\").then((res) => {\n      const personalisationsResponse = res.data\n        .map((personalisation) => personalisation.Description)\n        .filter((personalisation) => personalisation != \"\");\n      const UserPersonalisations = personalisationsResponse.map(\n        (personalisation) => {\n          return { value: personalisation, isSelected: false };\n        }\n      );\n      setPersonalisations(UserPersonalisations);\n    });\n  };\n\n  const onToggleNeedSelected = (selectedNeed) => {\n    setNeeds(\n      [\n        ...needs.filter((need) => need != selectedNeed),\n        { ...selectedNeed, isSelected: !selectedNeed.isSelected },\n      ].sort((a, b) => a.value.localeCompare(b.value))\n    );\n  };\n\n  const handleNeedsCompleted = () => {\n    trackEvent(\n      \"needs\",\n      needs.filter((need) => need.isSelected).map((need) => need.value)\n    );\n    history.push(\"/service-types\");\n  };\n\n  //QUESTION 2 - Support Types:\n\n  const onToggleSupportTypeSelected = (selectedSupportType) => {\n    const indexOfSupportType = supportTypes.findIndex(\n      (supportType) => supportType === selectedSupportType\n    );\n    const startOfArray = supportTypes.slice(0, indexOfSupportType);\n    const endOfArray = supportTypes.slice(\n      indexOfSupportType + 1,\n      supportTypes.length\n    );\n    setSupportTypes([\n      ...startOfArray,\n      { ...selectedSupportType, isSelected: !selectedSupportType.isSelected },\n      ...endOfArray,\n    ]);\n  };\n\n  const handleSupportTypesCompleted = () => {\n    trackEvent(\n      \"Support Types\",\n      supportTypes\n        .filter((supportType) => supportType.isSelected)\n        .map((supportType) => supportType.value)\n    );\n    history.push(\"/personalise\");\n  };\n\n  // QUESTION 3 - Personalisations:\n\n  const onTogglePersonalisationSelected = (selectedPersonalisation) => {\n    const indexOfPersonalisation = personalisations.findIndex(\n      (personalisation) => personalisation === selectedPersonalisation\n    );\n    const startOfArray = personalisations.slice(0, indexOfPersonalisation);\n    const endOfArray = personalisations.slice(\n      indexOfPersonalisation + 1,\n      personalisations.length\n    );\n    setPersonalisations([\n      ...startOfArray,\n      {\n        ...selectedPersonalisation,\n        isSelected: !selectedPersonalisation.isSelected,\n      },\n      ...endOfArray,\n    ]);\n  };\n\n  const handlePersonalisationsCompleted = () => {\n    trackEvent(\n      \"Personalisations\",\n      personalisations\n        .filter((personalisation) => personalisation.isSelected)\n        .map((personalisation) => personalisation.value)\n    );\n    history.push(\"/postcode\");\n  };\n\n  // QUESTION 4 - Postcode:\n\n  const handlePostcodeSearchCompleted = (text) => {\n    if (text === \"Enter your postcode\") {\n      text = \"\";\n    }\n    setPostcode(text);\n    history.push(\"/results\");\n  };\n\n  return (\n    <>\n      <TelemetryProvider\n        instrumentationKey=\"__instrumentationKey__\"\n        after={() => {\n          appInsights = getAppInsights();\n        }}\n      >\n        <Switch>\n          <Route exact path=\"/\">\n            <MultiChoiceQuestion\n              optionsList={needs}\n              onToggleItemSelected={onToggleNeedSelected}\n              onComplete={handleNeedsCompleted}\n              questionTitle=\"What can we help you with?\"\n            />\n          </Route>\n          <Route exact path=\"/service-types\">\n            <MultiChoiceQuestion\n              optionsList={supportTypes}\n              onToggleItemSelected={onToggleSupportTypeSelected}\n              onComplete={handleSupportTypesCompleted}\n              questionTitle=\"What types of support are you looking for?\"\n              onBackClicked={onBackClicked}\n              backgroundToUse=\"two\"\n            />\n          </Route>\n          <Route exact path=\"/personalise\">\n            <MultiChoiceQuestion\n              optionsList={personalisations}\n              onToggleItemSelected={onTogglePersonalisationSelected}\n              onComplete={handlePersonalisationsCompleted}\n              questionTitle=\"Personalise your results\"\n              onBackClicked={onBackClicked}\n              backgroundToUse=\"three\"\n            />\n          </Route>\n          <Route exact path=\"/postcode\">\n            <TextBoxQuestion\n              onComplete={handlePostcodeSearchCompleted}\n              onBackClicked={onBackClicked}\n              backgroundToUse=\"four\"\n              postcode={postcode}\n            />\n          </Route>\n          <Route exact path=\"/results\">\n            <Results\n              onBackClicked={onBackClicked}\n              needs={needs}\n              supportTypes={supportTypes}\n              personalisations={personalisations}\n              postcode={postcode}\n              charities={charities}\n              onToggleNeedSelected={onToggleNeedSelected}\n              onToggleSupportTypeSelected={onToggleSupportTypeSelected}\n              onTogglePersonalisationSelected={onTogglePersonalisationSelected}\n            />\n          </Route>\n        </Switch>\n      </TelemetryProvider>\n    </>\n  );\n};\n\nexport default withRouter(HomePageContainer);\n","/Users/steven/STA/miricyl/client/src/components/MultiChoiceQuestion.js",["99","100","101"],"import React, { useState, useEffect } from \"react\";\nimport \"../styles/global.css\";\nimport { IoIosArrowDropleft } from \"react-icons/io\";\n\nconst MultiChoiceQuestion = ({\n  optionsList,\n  onComplete,\n  questionTitle,\n  onBackClicked,\n  selected,\n  backgroundToUse = \"one\",\n}) => {\n  const [options, setOptions] = useState([]);\n\n  const handleOptionClicked = (selectedOption) => {\n    const indexOfSelectedOption = options.findIndex(\n      (option) => option == selectedOption\n    );\n\n    const toggledOption = {\n      ...selectedOption,\n      isSelected: !selectedOption.isSelected,\n    };\n\n    const startOfArray = options.slice(0, indexOfSelectedOption);\n    const endOfArray = options.slice(indexOfSelectedOption + 1);\n\n    setOptions([...startOfArray, toggledOption, ...endOfArray]);\n  };\n\n  useEffect(() => {\n    const optionsListForDisplay = optionsList.map((option) => {\n\n      // check if selected\n      var isSelected = false;\n      selected.map((value) => {\n\n        if (value === option) {\n          isSelected = true;\n        }\n      });\n      return { value: option, isSelected: isSelected };\n    });\n    setOptions(optionsListForDisplay);\n  }, [optionsList]);\n\n  const OptionsList = () => {\n    return options.map((option) => {\n      var isSelected = option.isSelected;\n      return (\n        <button\n          onClick={() => handleOptionClicked(option)}\n          className={\n            isSelected ? \"question-button-selected\" : \"question-button\"\n          }\n          value={option.value}\n          key={option.value}\n          id={option.value}\n        >\n          {option.value}\n        </button>\n      );\n    });\n  };\n\n  return (\n    <div className={`question-${backgroundToUse}-container`}>\n      <div className=\"question-grid-container\">\n        <div className=\"title-description-container\">\n          <h1 className=\"question-title\">\n            Search mental health resources & services that can help you feel\n            better\n          </h1>\n          <h2 className=\"question-page-detail-text\">\n            Boost is here for you if you need trusted guidance on accessing\n            resources and services that can positively impact your mental\n            health. We will guide you in finding the treatment and help you\n            need.\n          </h2>\n        </div>\n\n        <div>\n          <div className=\"select-container\">\n            <p className=\"question-text\">{questionTitle}</p>\n            <p className=\"question-subtext\">select all that apply</p>\n\n            <OptionsList />\n\n            <br />\n          </div>\n          <div className=\"bottom-navigation\">\n            {onBackClicked && (\n              <IoIosArrowDropleft\n                className=\"back-button\"\n                onClick={onBackClicked}\n              />\n            )}\n            <button\n              className=\"next-button\"\n              onClick={() =>\n                onComplete(\n                  options\n                    .filter((option) => option.isSelected)\n                    .map((option) => option.value)\n                )\n              }\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultiChoiceQuestion;\n","/Users/steven/STA/miricyl/client/src/components/TextBoxQuestion.js",["102"],"import React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { IoIosArrowDropleft } from \"react-icons/io\";\nimport \"../styles/global.css\";\n\nconst TextBoxQuestion = ({\n  onComplete,\n  onBackClicked,\n  backgroundToUse = \"one\",\n  postcode,\n}) => {\n  const [text, setText] = useState(\"\");\n  const checkPostcode = () => {\n    if (postcode) {\n      setText(`${postcode}`);\n    }\n  };\n\n  useEffect(() => {\n    checkPostcode();\n  }, []);\n  const handleChange = (e) => {\n    setText(e.target.value);\n  };\n\n  return (\n    <div className={`question-${backgroundToUse}-container`}>\n      <div className=\"question-grid-container\">\n        <div className=\"title-description-container\">\n          <h1 className=\"question-title\">\n            Search mental health resources & services that can help you feel\n            better\n          </h1>\n          <h2 className=\"question-page-detail-text\">\n            Boost is here for you if you need trusted guidance on accessing\n            resources and services that can positively impact your mental\n            health. We will guide you in finding the treatment and help you\n            need.\n          </h2>\n        </div>\n        <div>\n          <div className=\"select-container-q4\">\n            <p className=\"question-text\">\n              Enter the first part of your postcode to find services and support\n              in your area\n            </p>\n\n            <input\n              className=\"postcode-select\"\n              type=\"text\"\n              value={text}\n              onChange={handleChange}\n              placeholder=\"Enter your postcode\"\n            ></input>\n\n            <br />\n          </div>\n\n          <div className=\"bottom-navigation\">\n            {onBackClicked && (\n              <IoIosArrowDropleft\n                className=\"back-button\"\n                onClick={onBackClicked}\n              />\n            )}\n            <button className=\"next-button\" onClick={() => onComplete(text)}>\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(TextBoxQuestion);\n","/Users/steven/STA/miricyl/client/src/components/Results.js",["103","104","105","106","107","108","109","110","111","112","113","114","115"],"import React, { useState, useEffect } from \"react\";\nimport { useFlags } from \"../hooks/useFlags\";\nimport \"../styles/global.css\";\nimport Filter from \"./Filter\";\nimport { IconContext } from \"react-icons\";\nimport { BiPhone } from \"react-icons/bi\";\nimport { BiEnvelope } from \"react-icons/bi\";\nimport { BiChat } from \"react-icons/bi\";\nimport { BiMap } from \"react-icons/bi\";\nimport { withRouter } from \"react-router-dom\";\nimport { IoIosArrowDropleft } from \"react-icons/io\";\nimport ReactStars from \"react-rating-stars-component\";\nimport postcodeServer from \"../api/postcodeServer\"\n\nconst Results = ({\n  onBackClicked,\n  needs,\n  supportTypes,\n  personalisations,\n  postcode = \"\",\n  charities,\n  onToggleNeedSelected,\n  onToggleSupportTypeSelected,\n  onTogglePersonalisationSelected,\n}) => {\n  const [prioritisedResults, setprioritisedResults] = useState([]);\n  const [allCharities, setAllCharities] = useState([]);\n\n  const { filter } = useFlags();\n\n  const selectedNeeds = needs\n    .filter((need) => need.isSelected)\n    .map((selectedNeed) => selectedNeed.value);\n\n  const selectedSupportTypes = supportTypes\n    .filter((supportType) => supportType.isSelected)\n    .map((selectedSupportType) => selectedSupportType.value);\n\n  const selectedPersonalisations = personalisations\n    .filter((personalisation) => personalisation.isSelected)\n    .map((selectedPersonalisation) => selectedPersonalisation.value);\n\n  useEffect(() => {\n    clearStates();\n    constructCharityObjects();\n  }, [needs, supportTypes, personalisations]);\n\n  useEffect(() => {\n    sortCharities();\n  }, [allCharities]);\n\n  const clearStates = () => {\n    setAllCharities([]);\n    setprioritisedResults([]);\n  };\n\n  const sortCharities = async () => {\n    let filteredCharities = allCharities;\n\n    console.log('filter2', filteredCharities);\n\n\n    // if (selectedSupportTypes.length > 0) {\n    //   filteredCharities = filteredCharities.filter(\n    //     (charity) =>\n    //       charity.typesOfSupportOffered.filter((supportType) =>\n    //         selectedSupportTypes.includes(supportType)\n    //       ).length > 0\n    //   );\n    // }\n\n\n\n    // gets a list of all postcodes withing range of latitude and longitude \n    const getListOfPostcodes = async (payload) => {\n      const res = await postcodeServer.post('/', payload)\n      return res\n    }\n\n    // gets latitude and longitude from postcode\n    const getPostcodeDetails = async () => {\n      try {\n        const res = await postcodeServer.get(`/${postcode}`)\n        return res\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    if (selectedNeeds.length > 0) {\n      filteredCharities = filteredCharities.filter((charity) => {\n        return selectedNeeds.every((need) => charity.needsMet.includes(need));\n      });\n    }\n\n    if (postcode.length < 5 && postcode !== \"\") {\n      console.log('pc', postcode);\n      console.log('fired');\n      // sort for outer postcode\n      filteredCharities = filteredCharities.filter(\n        (charity) => charity.OuterCode.toUpperCase() == postcode.toUpperCase()\n      );\n    }\n    if (postcode.length > 4) {\n      // sort for full postcode with distance\n      let postcodeDetails = await getPostcodeDetails().then((postcodeDetails) => {\n        const latitude = postcodeDetails.data.result.latitude\n        const longitude = postcodeDetails.data.result.longitude\n        const payload = {\n          \"geolocations\": [{\n            \"latitude\": latitude,\n            \"longitude\": longitude,\n            \"radius\": 2000,\n            \"limit\": 100\n          }]\n        }\n        return payload\n      })\n      const matchingCharities = await getListOfPostcodes(postcodeDetails).then((returnedPostcodesResults) => {\n        const foundCharities = []\n        let returnedPostcodes = returnedPostcodesResults.data.result[0].result\n        filteredCharities.map((charity) => {\n          returnedPostcodes.filter((address) => {\n            if (charity.PostCode.toUpperCase() === address.postcode) {\n              foundCharities.push(charity)\n            }\n          })\n        })\n        return foundCharities\n\n\n      }).then((charities) => {\n        //setPostcodeCharities(charities)\n        filteredCharities = charities\n      })\n    }\n    console.log('filter', filteredCharities);\n\n    const prioritisedCharities = filteredCharities\n      .filter((charity) => charity.NationalService === \"YES\" || postcode != \"\")\n      .sort(\n        (a, b) =>\n          noOfMatchedSupportTypesAndPersonalisations(a, b) ||\n          noOfMatchedPersonalisations(a, b) ||\n          noOfMatchedSupportTypes(a, b) ||\n          alphabetical(a, b)\n      );\n\n    setprioritisedResults(prioritisedCharities);\n  };\n\n  const noOfMatchedSupportTypesAndPersonalisations = (a, b) =>\n    b.servicesWithMatchedPersonalisationsAndSupportTypes.length -\n    a.servicesWithMatchedPersonalisationsAndSupportTypes.length;\n\n  const noOfMatchedSupportTypes = (a, b) =>\n    b.matchedTypesOfSupportOffered.length -\n    a.matchedTypesOfSupportOffered.length;\n\n  const noOfMatchedPersonalisations = (a, b) =>\n    b.matchedPersonalisations.length - a.matchedPersonalisations.length;\n\n  const alphabetical = (a, b) => a.OrgName.localeCompare(b.OrgName);\n\n  // const needsMet = (a, b) => b.needsMet.length - a.needsMet.length;\n\n  const constructCharityObjects = () => {\n    let locationSortedCharities;\n\n    if (postcode == \"\") {\n      locationSortedCharities = charities.sort((a, b) => {\n        return a.NationalService === \"YES\"\n          ? -1\n          : b.NationalService === \"YES\"\n            ? 1\n            : 0;\n      });\n    } else {\n      locationSortedCharities = charities.sort((a, b) => {\n        return a.OuterCode.toUpperCase() === postcode.toUpperCase()\n          ? -1\n          : b.OuterCode.toUpperCase() === postcode.toUpperCase()\n            ? 1\n            : 0;\n      });\n    }\n\n    const uniqueOrgIds = [\n      ...new Set(locationSortedCharities.map((charity) => charity.OrgID)),\n    ];\n\n    const charityObjects = uniqueOrgIds.map((orgId) => {\n      const charity = charities.find((charity) => charity.OrgID === orgId);\n      let servicesFromCharity = charities.filter((charity) => {\n        return (\n          charity.OrgID == orgId &&\n          (postcode === \"\"\n            ? charity.NationalService === \"YES\"\n            : charity.OuterCode.toUpperCase() === postcode.toUpperCase())\n        );\n      });\n\n      // This filtering logic will need to be changed once the use filter interface is implemented\n      // as for now it deletes any unselected filters which the user may wish to enable\n\n      const needsMet = [\n        ...new Set(servicesFromCharity.map((service) => service.UserOption)),\n      ].filter((need) => selectedNeeds.includes(need));\n\n      const typesOfSupportOffered = [\n        ...new Set(\n          servicesFromCharity.map((service) => service.UserOption_Type)\n        ),\n      ];\n\n      const matchedTypesOfSupportOffered = [\n        ...new Set(\n          servicesFromCharity\n            .filter(\n              (service) =>\n                (selectedNeeds.includes(service.UserOption) ||\n                  selectedNeeds.length === 0) &&\n                selectedSupportTypes.includes(service.UserOption_Type)\n            )\n            .map((matchedService) => matchedService.UserOption_Type)\n        ),\n      ];\n\n      const personalisationsMet = [\n        ...new Set(\n          servicesFromCharity.map((service) => service.Personalisation)\n        ),\n      ];\n\n      const matchedPersonalisations = [\n        ...new Set(\n          servicesFromCharity\n            .filter(\n              (service) =>\n                (selectedNeeds.includes(service.UserOption) ||\n                  selectedNeeds.length === 0) &&\n                selectedPersonalisations.includes(service.Personalisation)\n            )\n            .map((matchedService) => matchedService.Personalisation)\n        ),\n      ];\n\n      const servicesWithMatchedPersonalisationsAndSupportTypes = [\n        ...new Set(\n          servicesFromCharity\n            .filter(\n              (service) =>\n                (selectedNeeds.includes(service.UserOption) ||\n                  selectedNeeds.length === 0) &&\n                selectedPersonalisations.includes(service.Personalisation) &&\n                selectedSupportTypes.includes(service.UserOption_Type)\n            )\n            .map((matchedService) => matchedService.Personalisation)\n        ),\n      ];\n\n      // This stuff is causing pass by reference issues currently\n      // delete charity.TypeOfSupport;\n      // delete charity.UserOption_Type;\n      // delete charity.UserOption;\n      // delete charity.Personalisation;\n\n      return {\n        ...charity,\n        needsMet,\n        typesOfSupportOffered,\n        matchedTypesOfSupportOffered,\n        personalisationsMet,\n        matchedPersonalisations,\n        servicesWithMatchedPersonalisationsAndSupportTypes,\n      };\n    });\n\n    setAllCharities(charityObjects);\n  };\n\n  const PrioritisedListOfCharities = prioritisedResults.map((charity) => (\n    <div\n      className=\"results-list-container\"\n      key={charity.PlaceID}\n      test-id={`card-${charity.OrgID}`}\n    >\n      <div className=\"results-title-container\">\n        {charity.Logo ? (\n          <a href={charity.ServiceURL} target=\"_blank\">\n            <img className=\"results-list-logo\" src={charity.Logo} />\n          </a>\n        ) : (\n            <div></div>\n          )}\n\n        <div className=\"results-list-title-service\">\n          {charity.ServiceURL ? (\n            <p className=\"results-list-title\">\n              {\" \"}\n              <a href={charity.ServiceURL} target=\"_blank\">\n                {charity.OrgName}\n              </a>\n            </p>\n          ) : (\n              <p className=\"results-list-title\">{charity.OrgName}</p>\n            )}\n\n          {/* <p className=\"results-list-service-description\">\n            {charity.ServiceDescription}\n          </p> */}\n          {charity.googleRating ? (\n            <p>\n              {\" \"}\n              <ReactStars\n                count={5}\n                value={charity.googleRating}\n                isHalf={true}\n              />\n              {charity.googleRating}{\" \"}\n            </p>\n          ) : (\n              <p>\n                {\" \"}\n                <ReactStars count={5} value={0} isHalf={true} />\n              No ratings found{\" \"}\n              </p>\n            )}\n        </div>\n      </div>\n\n      <div className=\"results-button-container\">\n        {charity.PhoneNo && (\n          <button className=\"results-list-button\" type=\"button\">\n            <IconContext.Provider\n              value={{ className: \"results-react-button-icon\" }}\n            >\n              <a href={\"tel:\" + charity.PhoneNo}>\n                <BiPhone /> Call\n              </a>\n            </IconContext.Provider>\n          </button>\n        )}\n\n        {charity.ServiceURL && (\n          <button className=\"results-list-button\" type=\"button\">\n            <IconContext.Provider\n              value={{ className: \"results-react-button-icon\" }}\n            >\n              <a href={charity.ServiceURL} target=\"_blank\">\n                <BiChat /> Chat{\" \"}\n              </a>\n            </IconContext.Provider>\n          </button>\n        )}\n\n        {charity.EmailAddress && (\n          <button className=\"results-list-button\" type=\"button\">\n            <IconContext.Provider\n              value={{ className: \"results-react-button-icon\" }}\n            >\n              <a class=\"mailto\" href={\"mailto:\" + charity.EmailAddress}>\n                <BiEnvelope /> Email\n              </a>\n            </IconContext.Provider>\n          </button>\n        )}\n      </div>\n\n      {charity.OpeningTime && (\n        <p className=\"results-list-sub-title\">\n          <IconContext.Provider\n            value={{ className: \"results-react-icons-detail\" }}\n          >\n            {\" \"}\n            <BiPhone /> Phone Support:\n          </IconContext.Provider>\n        </p>\n      )}\n      <p className=\"results-list-service-detail\">{charity.OpeningTime}</p>\n\n      {charity.PhysicalAddress && (\n        <p className=\"results-list-sub-title\">\n          <IconContext.Provider\n            value={{ className: \"results-react-icons-detail\" }}\n          >\n            {\" \"}\n            <BiMap /> Address:\n          </IconContext.Provider>\n        </p>\n      )}\n      <p className=\"results-list-service-detail\">{charity.PhysicalAddress}</p>\n\n      {/* TODO: REMOVE INLINE CSS */}\n      <div style={{ display: \"flex\" }}>\n        {charity.needsMet.map((need) => (\n          <span className=\"results-list-needs-tag\">{need}</span>\n        ))}\n      </div>\n\n      <div style={{ display: \"flex\" }}>\n        {charity.personalisationsMet.map((personalisation) => (\n          <span className=\"results-list-personalisation-tag\">\n            {personalisation}\n          </span>\n        ))}\n      </div>\n\n      {charity.typesOfSupportOffered && (\n        <p className=\"results-list-sub-title\">Types of Service:</p>\n      )}\n\n      {charity.typesOfSupportOffered.map((supportType) => {\n        return <li className=\"results-list-service-detail\">{supportType}</li>;\n      })}\n\n      {charity.OrgDescription && (\n        <p className=\"results-list-sub-title\">About</p>\n      )}\n      <p className=\"results-list-service-detail\">{charity.OrgDescription}</p>\n    </div>\n  ));\n\n  return (\n    <div className=\"results-page-container\">\n      <div className=\"results-wrapper\">\n        {filter === 1 && (\n          <Filter\n            needs={needs}\n            supportTypes={supportTypes}\n            personalisations={personalisations}\n            onToggleNeedSelected={onToggleNeedSelected}\n            onToggleSupportTypeSelected={onToggleSupportTypeSelected}\n            onTogglePersonalisationSelected={onTogglePersonalisationSelected}\n          />\n        )}\n        <div className=\"title-description-container\">\n          <h1 className=\"question-title\" test-id=\"results-title\">\n            Search results\n          </h1>\n        </div>\n        <div className=\"results-page-display\">{PrioritisedListOfCharities}</div>\n        <div className=\"bottom-navigation\">\n          {onBackClicked && (\n            <IoIosArrowDropleft\n              className=\"back-button\"\n              onClick={onBackClicked}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(Results);\n","/Users/steven/STA/miricyl/client/src/api/GoogleServer.js",[],["116","117"],"/Users/steven/STA/miricyl/client/src/api/nodeServer.js",[],"/Users/steven/STA/miricyl/client/src/telemetry/TelemetryService.js",[],"/Users/steven/STA/miricyl/client/src/telemetry/telemetry-provider.jsx",[],"/Users/steven/STA/miricyl/client/src/api/postcodeServer.js",[],"/Users/steven/STA/miricyl/client/src/components/FlagsProvider.js",["118"],"import React, { useEffect, createContext, useState } from \"react\";\nimport { firebase } from \"../firebase\";\n\nexport const FlagsContext = createContext({});\nconst remoteConfig = firebase.remoteConfig();\n\n// Only for development\nremoteConfig.settings = {\n  minimumFetchIntervalMillis: 300000,\n};\nconst FlagsProvider = ({ defaults, children }) => {\n  const [flags, setFlags] = useState(defaults);\n\n  useEffect(() => {\n    remoteConfig.defaultConfig = defaults;\n    remoteConfig\n      .fetchAndActivate()\n      .then((activated) => {\n        return remoteConfig.getAll();\n      })\n      .then((remoteFlags) => {\n        const newFlags = {\n          ...flags,\n        };\n        for (const [key, config] of Object.entries(remoteFlags)) {\n          if (config._value) {\n            newFlags[key] = parseInt(config._value);\n          }\n        }\n\n        setFlags(newFlags);\n      })\n      .catch((error) => console.error(error));\n  }, []);\n\n  return (\n    <FlagsContext.Provider value={flags}>{children}</FlagsContext.Provider>\n  );\n};\n\nexport default FlagsProvider;\n","/Users/steven/STA/miricyl/client/src/hooks/useFlags.js",["119"],"import React, { useContext } from \"react\";\nimport { FlagsContext } from \"../components/FlagsProvider\";\n\nexport const useFlags = () => {\n  const context = useContext(FlagsContext);\n  return context;\n};\n","/Users/steven/STA/miricyl/client/src/components/SubHeader.js",[],"/Users/steven/STA/miricyl/client/src/components/Header.js",[],"/Users/steven/STA/miricyl/client/src/components/BackButton.js",[],"/Users/steven/STA/miricyl/client/src/components/Filter.js",[],"/Users/steven/STA/miricyl/client/src/firebase.js",[],"/Users/steven/STA/miricyl/client/src/components/FilterSubSection.js",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":3,"column":10,"nodeType":"126","messageId":"127","endLine":3,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":77,"column":54,"nodeType":"130","messageId":"131","endLine":77,"endColumn":56},{"ruleId":"128","severity":1,"message":"129","line":90,"column":40,"nodeType":"130","messageId":"131","endLine":90,"endColumn":42},{"ruleId":"128","severity":1,"message":"132","line":19,"column":26,"nodeType":"130","messageId":"131","endLine":19,"endColumn":28},{"ruleId":"133","severity":1,"message":"134","line":38,"column":28,"nodeType":"135","messageId":"136","endLine":38,"endColumn":30},{"ruleId":"137","severity":1,"message":"138","line":47,"column":6,"nodeType":"139","endLine":47,"endColumn":19,"suggestions":"140"},{"ruleId":"137","severity":1,"message":"141","line":21,"column":6,"nodeType":"139","endLine":21,"endColumn":8,"suggestions":"142"},{"ruleId":"137","severity":1,"message":"143","line":46,"column":6,"nodeType":"139","endLine":46,"endColumn":45,"suggestions":"144"},{"ruleId":"137","severity":1,"message":"145","line":50,"column":6,"nodeType":"139","endLine":50,"endColumn":20,"suggestions":"146"},{"ruleId":"128","severity":1,"message":"132","line":101,"column":54,"nodeType":"130","messageId":"131","endLine":101,"endColumn":56},{"ruleId":"124","severity":1,"message":"147","line":119,"column":13,"nodeType":"126","messageId":"127","endLine":119,"endColumn":30},{"ruleId":"133","severity":1,"message":"134","line":122,"column":41,"nodeType":"135","messageId":"136","endLine":122,"endColumn":43},{"ruleId":"133","severity":1,"message":"148","line":123,"column":46,"nodeType":"135","messageId":"136","endLine":123,"endColumn":48},{"ruleId":"128","severity":1,"message":"129","line":140,"column":74,"nodeType":"130","messageId":"131","endLine":140,"endColumn":76},{"ruleId":"128","severity":1,"message":"132","line":170,"column":18,"nodeType":"130","messageId":"131","endLine":170,"endColumn":20},{"ruleId":"128","severity":1,"message":"132","line":196,"column":25,"nodeType":"130","messageId":"131","endLine":196,"endColumn":27},{"ruleId":"149","severity":1,"message":"150","line":290,"column":40,"nodeType":"151","endLine":290,"endColumn":55},{"ruleId":"152","severity":1,"message":"153","line":291,"column":13,"nodeType":"154","endLine":291,"endColumn":69},{"ruleId":"149","severity":1,"message":"150","line":301,"column":44,"nodeType":"151","endLine":301,"endColumn":59},{"ruleId":"149","severity":1,"message":"150","line":350,"column":44,"nodeType":"151","endLine":350,"endColumn":59},{"ruleId":"120","replacedBy":"155"},{"ruleId":"122","replacedBy":"156"},{"ruleId":"137","severity":1,"message":"157","line":34,"column":6,"nodeType":"139","endLine":34,"endColumn":8,"suggestions":"158"},{"ruleId":"124","severity":1,"message":"159","line":1,"column":8,"nodeType":"126","messageId":"127","endLine":1,"endColumn":13},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"no-unused-vars","'useFlags' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selected'. Either include it or remove the dependency array.","ArrayExpression",["162"],"React Hook useEffect has a missing dependency: 'checkPostcode'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has a missing dependency: 'constructCharityObjects'. Either include it or remove the dependency array.",["164"],"React Hook useEffect has a missing dependency: 'sortCharities'. Either include it or remove the dependency array.",["165"],"'matchingCharities' is assigned a value but never used.","Array.prototype.filter() expects a return value from arrow function.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["160"],["161"],"React Hook useEffect has missing dependencies: 'defaults' and 'flags'. Either include them or remove the dependency array.",["166"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [optionsList, selected]",{"range":"177","text":"178"},"Update the dependencies array to be: [checkPostcode]",{"range":"179","text":"180"},"Update the dependencies array to be: [needs, supportTypes, personalisations, constructCharityObjects]",{"range":"181","text":"182"},"Update the dependencies array to be: [allCharities, sortCharities]",{"range":"183","text":"184"},"Update the dependencies array to be: [defaults, flags]",{"range":"185","text":"186"},[1203,1216],"[optionsList, selected]",[469,471],"[checkPostcode]",[1483,1522],"[needs, supportTypes, personalisations, constructCharityObjects]",[1572,1586],"[allCharities, sortCharities]",[928,930],"[defaults, flags]"]