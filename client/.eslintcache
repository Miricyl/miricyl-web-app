[{"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\index.js":"1","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\serviceWorker.js":"2","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\App.js":"3","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\Navbar.js":"4","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\FlagsProvider.js":"5","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\containers\\HomePageContainer.js":"6","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\firebase.js":"7","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\MultiChoiceQuestion.js":"8","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\TextBoxQuestion.js":"9","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\api\\nodeServer.js":"10","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\hooks\\useFlags.js":"11","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\telemetry\\TelemetryService.js":"12","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\telemetry\\telemetry-provider.jsx":"13","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\Header.js":"14","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\SubHeader.js":"15","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\BackButton.js":"16","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\Filter.js":"17","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\FilterSubSection.js":"18","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\Results\\Results.jsx":"19","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\OrgCard\\OrgCard.jsx":"20"},{"size":520,"mtime":1609180501361,"results":"21","hashOfConfig":"22"},{"size":5239,"mtime":1607175593247,"results":"23","hashOfConfig":"22"},{"size":495,"mtime":1609182446064,"results":"24","hashOfConfig":"22"},{"size":664,"mtime":1609177257027,"results":"25","hashOfConfig":"22"},{"size":1101,"mtime":1609183540905,"results":"26","hashOfConfig":"22"},{"size":7507,"mtime":1610127939316,"results":"27","hashOfConfig":"22"},{"size":305,"mtime":1609181103269,"results":"28","hashOfConfig":"22"},{"size":1945,"mtime":1610127719940,"results":"29","hashOfConfig":"22"},{"size":1883,"mtime":1609178668963,"results":"30","hashOfConfig":"22"},{"size":262,"mtime":1608226070397,"results":"31","hashOfConfig":"22"},{"size":208,"mtime":1609181056072,"results":"32","hashOfConfig":"22"},{"size":1706,"mtime":1608584865580,"results":"33","hashOfConfig":"22"},{"size":1294,"mtime":1608584865580,"results":"34","hashOfConfig":"22"},{"size":251,"mtime":1609177783151,"results":"35","hashOfConfig":"22"},{"size":404,"mtime":1609177860503,"results":"36","hashOfConfig":"22"},{"size":301,"mtime":1609178085423,"results":"37","hashOfConfig":"22"},{"size":1397,"mtime":1609409910220,"results":"38","hashOfConfig":"22"},{"size":852,"mtime":1609411165901,"results":"39","hashOfConfig":"22"},{"size":4790,"mtime":1610197087385,"results":"40","hashOfConfig":"22"},{"size":3080,"mtime":1610199681083,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"mxa1dd",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\index.js",[],["87","88"],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\serviceWorker.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\App.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\Navbar.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\FlagsProvider.js",["89"],"import React, { useEffect, createContext, useState } from \"react\";\r\nimport { firebase } from \"../firebase\";\r\n\r\nexport const FlagsContext = createContext({});\r\nconst remoteConfig = firebase.remoteConfig();\r\n\r\n// Only for development\r\nremoteConfig.settings = {\r\n  minimumFetchIntervalMillis: 300000,\r\n};\r\nconst FlagsProvider = ({ defaults, children }) => {\r\n  const [flags, setFlags] = useState(defaults);\r\n\r\n  useEffect(() => {\r\n    remoteConfig.defaultConfig = defaults;\r\n    remoteConfig\r\n      .fetchAndActivate()\r\n      .then((activated) => {\r\n        return remoteConfig.getAll();\r\n      })\r\n      .then((remoteFlags) => {\r\n        const newFlags = {\r\n          ...flags,\r\n        };\r\n        for (const [key, config] of Object.entries(remoteFlags)) {\r\n          if (config._value) {\r\n            newFlags[key] = parseInt(config._value);\r\n          }\r\n        }\r\n\r\n        setFlags(newFlags);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  return (\r\n    <FlagsContext.Provider value={flags}>{children}</FlagsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default FlagsProvider;\r\n","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\containers\\HomePageContainer.js",["90","91","92"],"import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport { useFlags } from \"../hooks/useFlags\";\r\nimport nodeServer from \"../api/nodeServer\";\r\nimport MultiChoiceQuestion from \"../components/MultiChoiceQuestion\";\r\nimport TextBoxQuestion from \"../components/TextBoxQuestion\";\r\n// import Results from \"../components/Results\";\r\nimport Results from \"../components/Results/Results\";\r\nimport { getAppInsights } from \"../telemetry/TelemetryService\";\r\nimport TelemetryProvider from \"../telemetry/telemetry-provider\";\r\n\r\nconst HomePageContainer = ({ history }) => {\r\n  const [needs, setNeeds] = useState([]);\r\n  const [supportTypes, setSupportTypes] = useState([]);\r\n  const [personalisations, setPersonalisations] = useState([]);\r\n\r\n  const [charities, setCharities] = useState([]);\r\n\r\n  const [postcode, setPostcode] = useState(\"\");\r\n\r\n  let appInsights = getAppInsights();\r\n\r\n  const onBackClicked = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  const trackEvent = (type, selected) => {\r\n    appInsights.trackEvent({\r\n      page: type,\r\n      selected: selected,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllOptionsFromServer();\r\n  }, []);\r\n\r\n  // QUESTION - 1: Needs\r\n\r\n  const getAllOptionsFromServer = () => {\r\n    nodeServer.get(\"/needs\").then((res) => {\r\n      const needsResponse = res.data;\r\n      needsResponse.sort((a, b) => a.Need.localeCompare(b.Need));\r\n      const userNeeds = needsResponse.map((need) => {\r\n        return { value: need.Need, isSelected: false };\r\n      });\r\n      setNeeds(userNeeds);\r\n    });\r\n\r\n    nodeServer\r\n      .get(\"/v2/charities\")\r\n      .then((res) => {\r\n        const foundCharities = res.data;\r\n        setCharities(foundCharities);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    nodeServer.get(\"/types\").then((res) => {\r\n      const supportTypesResponse = res.data;\r\n\r\n      const uniqueSupportTypes = [\r\n        ...new Set(\r\n          supportTypesResponse.map((supportType) => supportType.UserOption_Type)\r\n        ),\r\n      ].map((supportType) => {\r\n        return { value: supportType, isSelected: false };\r\n      });\r\n\r\n      setSupportTypes(uniqueSupportTypes);\r\n    });\r\n\r\n    nodeServer.get(\"/personalisations\").then((res) => {\r\n      const personalisationsResponse = res.data\r\n        .map((personalisation) => personalisation.Description)\r\n        .filter((personalisation) => personalisation != \"\");\r\n      const UserPersonalisations = personalisationsResponse.map(\r\n        (personalisation) => {\r\n          return { value: personalisation, isSelected: false };\r\n        }\r\n      );\r\n      setPersonalisations(UserPersonalisations);\r\n    });\r\n  };\r\n\r\n  const onToggleNeedSelected = (selectedNeed) => {\r\n    setNeeds(\r\n      [\r\n        ...needs.filter((need) => need != selectedNeed),\r\n        { ...selectedNeed, isSelected: !selectedNeed.isSelected },\r\n      ].sort((a, b) => a.value.localeCompare(b.value))\r\n    );\r\n  };\r\n\r\n  const handleNeedsCompleted = () => {\r\n    trackEvent(\r\n      \"needs\",\r\n      needs.filter((need) => need.isSelected).map((need) => need.value)\r\n    );\r\n    history.push(\"/service-types\");\r\n  };\r\n\r\n  //QUESTION 2 - Support Types:\r\n\r\n  const onToggleSupportTypeSelected = (selectedSupportType) => {\r\n    const indexOfSupportType = supportTypes.findIndex(\r\n      (supportType) => supportType === selectedSupportType\r\n    );\r\n    const startOfArray = supportTypes.slice(0, indexOfSupportType);\r\n    const endOfArray = supportTypes.slice(\r\n      indexOfSupportType + 1,\r\n      supportTypes.length\r\n    );\r\n    setSupportTypes([\r\n      ...startOfArray,\r\n      { ...selectedSupportType, isSelected: !selectedSupportType.isSelected },\r\n      ...endOfArray,\r\n    ]);\r\n  };\r\n\r\n  const handleSupportTypesCompleted = () => {\r\n    trackEvent(\r\n      \"Support Types\",\r\n      supportTypes\r\n        .filter((supportType) => supportType.isSelected)\r\n        .map((supportType) => supportType.value)\r\n    );\r\n    history.push(\"/personalise\");\r\n  };\r\n\r\n  // QUESTION 3 - Personalisations:\r\n\r\n  const onTogglePersonalisationSelected = (selectedPersonalisation) => {\r\n    const indexOfPersonalisation = personalisations.findIndex(\r\n      (personalisation) => personalisation === selectedPersonalisation\r\n    );\r\n    const startOfArray = personalisations.slice(0, indexOfPersonalisation);\r\n    const endOfArray = personalisations.slice(\r\n      indexOfPersonalisation + 1,\r\n      personalisations.length\r\n    );\r\n    setPersonalisations([\r\n      ...startOfArray,\r\n      {\r\n        ...selectedPersonalisation,\r\n        isSelected: !selectedPersonalisation.isSelected,\r\n      },\r\n      ...endOfArray,\r\n    ]);\r\n  };\r\n\r\n  const handlePersonalisationsCompleted = () => {\r\n    trackEvent(\r\n      \"Personalisations\",\r\n      personalisations\r\n        .filter((personalisation) => personalisation.isSelected)\r\n        .map((personalisation) => personalisation.value)\r\n    );\r\n    history.push(\"/postcode\");\r\n  };\r\n\r\n  // QUESTION 4 - Postcode:\r\n\r\n  const handlePostcodeSearchCompleted = (text) => {\r\n    if (text === \"Enter your postcode\") {\r\n      text = \"\";\r\n    }\r\n    setPostcode(text);\r\n    history.push(\"/results\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TelemetryProvider\r\n        instrumentationKey=\"__instrumentationKey__\"\r\n        after={() => {\r\n          appInsights = getAppInsights();\r\n        }}\r\n      >\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <MultiChoiceQuestion\r\n              optionsList={needs}\r\n              onToggleItemSelected={onToggleNeedSelected}\r\n              onComplete={handleNeedsCompleted}\r\n              questionTitle=\"What can we help you with?\"\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/service-types\">\r\n            <MultiChoiceQuestion\r\n              optionsList={supportTypes}\r\n              onToggleItemSelected={onToggleSupportTypeSelected}\r\n              onComplete={handleSupportTypesCompleted}\r\n              questionTitle=\"What types of support are you looking for?\"\r\n              onBackClicked={onBackClicked}\r\n              backgroundToUse=\"two\"\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/personalise\">\r\n            <MultiChoiceQuestion\r\n              optionsList={personalisations}\r\n              onToggleItemSelected={onTogglePersonalisationSelected}\r\n              onComplete={handlePersonalisationsCompleted}\r\n              questionTitle=\"Personalise your results\"\r\n              onBackClicked={onBackClicked}\r\n              backgroundToUse=\"three\"\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/postcode\">\r\n            <TextBoxQuestion\r\n              onComplete={handlePostcodeSearchCompleted}\r\n              onBackClicked={onBackClicked}\r\n              backgroundToUse=\"four\"\r\n              postcode={postcode}\r\n            />\r\n          </Route>\r\n          <Route exact path=\"/results\">\r\n            <Results\r\n              onBackClicked={onBackClicked}\r\n              needs={needs}\r\n              supportTypes={supportTypes}\r\n              personalisations={personalisations}\r\n              postcode={postcode}\r\n              charities={charities}\r\n              onToggleNeedSelected={onToggleNeedSelected}\r\n              onToggleSupportTypeSelected={onToggleSupportTypeSelected}\r\n              onTogglePersonalisationSelected={onTogglePersonalisationSelected}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </TelemetryProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(HomePageContainer);\r\n","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\firebase.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\MultiChoiceQuestion.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\TextBoxQuestion.js",["93"],"import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"../styles/global.css\";\r\nimport Header from \"./Header\";\r\nimport SubHeader from \"./SubHeader\";\r\nimport BackButton from \"./BackButton\";\r\n\r\nconst TextBoxQuestion = ({\r\n  onComplete,\r\n  onBackClicked,\r\n  backgroundToUse = \"one\",\r\n  postcode,\r\n}) => {\r\n  const [text, setText] = useState(\"\");\r\n  const checkPostcode = () => {\r\n    if (postcode) {\r\n      setText(`${postcode}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkPostcode();\r\n  }, []);\r\n  const handleChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className={`question-${backgroundToUse}-container`}>\r\n      <div className=\"question-grid-container\">\r\n        <div className=\"title-description-container\">\r\n          <Header />\r\n          <SubHeader />\r\n        </div>\r\n        <div>\r\n          <div className=\"select-container-q4\">\r\n            <p className=\"question-text\" test-id=\"question-title\">\r\n              Enter the first part of your postcode to find services and support\r\n              in your area\r\n            </p>\r\n\r\n            <input\r\n              className=\"postcode-select\"\r\n              type=\"text\"\r\n              value={text}\r\n              onChange={handleChange}\r\n              placeholder=\"Enter your postcode\"\r\n              test-id=\"text-input-field\"\r\n            ></input>\r\n\r\n            <br />\r\n          </div>\r\n\r\n          <div className=\"bottom-navigation\">\r\n            {onBackClicked && <BackButton onBackClicked={onBackClicked} />}\r\n            <button\r\n              className=\"next-button\"\r\n              onClick={() => onComplete(text)}\r\n              test-id=\"next-button\"\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(TextBoxQuestion);\r\n","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\api\\nodeServer.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\hooks\\useFlags.js",["94"],"import React, { useContext } from \"react\";\r\nimport { FlagsContext } from \"../components/FlagsProvider\";\r\n\r\nexport const useFlags = () => {\r\n  const context = useContext(FlagsContext);\r\n  return context;\r\n};\r\n","C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\telemetry\\TelemetryService.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\telemetry\\telemetry-provider.jsx",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\Header.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\SubHeader.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\BackButton.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\Filter.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\FilterSubSection.js",[],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\Results\\Results.jsx",["95"],"C:\\Users\\Michael\\Documents\\Developement\\STA\\Miricyl\\Miricyl\\client\\src\\components\\OrgCard\\OrgCard.jsx",["96","97"],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":34,"column":6,"nodeType":"104","endLine":34,"endColumn":8,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":18},{"ruleId":"110","severity":1,"message":"111","line":77,"column":54,"nodeType":"112","messageId":"113","endLine":77,"endColumn":56},{"ruleId":"110","severity":1,"message":"111","line":90,"column":40,"nodeType":"112","messageId":"113","endLine":90,"endColumn":42},{"ruleId":"102","severity":1,"message":"114","line":23,"column":6,"nodeType":"104","endLine":23,"endColumn":8,"suggestions":"115"},{"ruleId":"106","severity":1,"message":"116","line":1,"column":8,"nodeType":"108","messageId":"109","endLine":1,"endColumn":13},{"ruleId":"106","severity":1,"message":"117","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":25},{"ruleId":"106","severity":1,"message":"118","line":4,"column":8,"nodeType":"108","messageId":"109","endLine":4,"endColumn":18},{"ruleId":"119","severity":1,"message":"120","line":26,"column":34,"nodeType":"121","endLine":26,"endColumn":49},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'defaults' and 'flags'. Either include them or remove the dependency array.","ArrayExpression",["124"],"no-unused-vars","'useFlags' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'checkPostcode'. Either include it or remove the dependency array.",["125"],"'React' is defined but never used.","'useState' is defined but never used.","'ReactStars' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [defaults, flags]",{"range":"130","text":"131"},"Update the dependencies array to be: [checkPostcode]",{"range":"132","text":"133"},[961,963],"[defaults, flags]",[545,547],"[checkPostcode]"]