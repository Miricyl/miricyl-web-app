[{"/Users/steven/STA/miricyl/client/src/index.js":"1","/Users/steven/STA/miricyl/client/src/App.js":"2","/Users/steven/STA/miricyl/client/src/serviceWorker.js":"3","/Users/steven/STA/miricyl/client/src/components/Navbar.js":"4","/Users/steven/STA/miricyl/client/src/containers/HomePageContainer.js":"5","/Users/steven/STA/miricyl/client/src/components/MultiChoiceQuestion.js":"6","/Users/steven/STA/miricyl/client/src/components/TextBoxQuestion.js":"7","/Users/steven/STA/miricyl/client/src/components/Results.js":"8","/Users/steven/STA/miricyl/client/src/api/GoogleServer.js":"9","/Users/steven/STA/miricyl/client/src/api/nodeServer.js":"10","/Users/steven/STA/miricyl/client/src/telemetry/TelemetryService.js":"11","/Users/steven/STA/miricyl/client/src/telemetry/telemetry-provider.jsx":"12","/Users/steven/STA/miricyl/client/src/api/postcodeServer.js":"13"},{"size":503,"mtime":1607860249312,"results":"14","hashOfConfig":"15"},{"size":346,"mtime":1607860249305,"results":"16","hashOfConfig":"15"},{"size":5098,"mtime":1607860249313,"results":"17","hashOfConfig":"15"},{"size":495,"mtime":1607860249308,"results":"18","hashOfConfig":"15"},{"size":6187,"mtime":1608500546340,"results":"19","hashOfConfig":"15"},{"size":3275,"mtime":1608500546339,"results":"20","hashOfConfig":"15"},{"size":2140,"mtime":1608500231983,"results":"21","hashOfConfig":"15"},{"size":13315,"mtime":1609245577795,"results":"22","hashOfConfig":"15"},{"size":142,"mtime":1605563262634,"results":"23","hashOfConfig":"15"},{"size":251,"mtime":1608500231982,"results":"24","hashOfConfig":"15"},{"size":1656,"mtime":1608500546342,"results":"25","hashOfConfig":"15"},{"size":1256,"mtime":1608500546343,"results":"26","hashOfConfig":"15"},{"size":115,"mtime":1609068530544,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ac0x9w",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/steven/STA/miricyl/client/src/index.js",[],["59","60"],"/Users/steven/STA/miricyl/client/src/App.js",[],"/Users/steven/STA/miricyl/client/src/serviceWorker.js",[],"/Users/steven/STA/miricyl/client/src/components/Navbar.js",[],"/Users/steven/STA/miricyl/client/src/containers/HomePageContainer.js",["61","62"],"import React, { useEffect, useState } from \"react\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport nodeServer from \"../api/nodeServer\";\nimport MultiChoiceQuestion from \"../components/MultiChoiceQuestion\";\nimport TextBoxQuestion from \"../components/TextBoxQuestion\";\nimport Results from \"../components/Results\";\nimport { getAppInsights } from '../telemetry/TelemetryService'\nimport TelemetryProvider from '../telemetry/telemetry-provider'\n\nconst HomePageContainer = ({ history }) => {\n  const [allNeeds, setAllNeeds] = useState([]);\n  const [selectedNeeds, setSelectedNeeds] = useState([]);\n\n  const [allSupportTypes, setAllSupportTypes] = useState([]);\n  const [selectedSupportTypes, setSelectedSupportTypes] = useState([]);\n\n  const [allPersonalisations, setAllPersonalisations] = useState([]);\n  const [selectedPersonalisations, setSelectedPersonalisations] = useState([]);\n\n  const [charities, setCharities] = useState([]);\n\n  const [postcode, setPostcode] = useState(\"\");\n\n\n  let appInsights = getAppInsights()\n\n  useEffect(() => {\n    getNeeds();\n  }, []);\n\n  const onBackClicked = () => {\n    history.goBack();\n  };\n\n  const trackEvent = (type, selected) => {\n    appInsights.trackEvent({\n      page: type,\n      selected: selected\n    })\n\n  }\n\n  // QUESTION - 1: Needs\n\n  const getNeeds = () => {\n    nodeServer.get(\"/needs\").then((res) => {\n      const needsResponse = res.data;\n      needsResponse.sort((a, b) => a.Need.localeCompare(b.Need));\n      const needs = needsResponse.map((need) => need.Need);\n      setAllNeeds(needs);\n    });\n  };\n\n  const handleNeedsCompleted = (selectedOptions) => {\n    setSelectedNeeds(selectedOptions);\n    getSupportTypes();\n    getCharitiesSuitableForNeeds(selectedOptions);\n    trackEvent(\"needs\", selectedOptions)\n    history.push(\"/service-types\");\n    // fetchCharitiesSuitableForNeeds();\n  };\n\n  const getCharitiesSuitableForNeeds = (selectedOptions) => {\n    // this method could do with a good refactor\n\n    if (selectedOptions.length === 0) {\n      nodeServer\n        .get(\"/charities\")\n        .then((res) => {\n          const charities = res.data;\n          setCharities(charities);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    } else {\n      let queryParams = \"\";\n      selectedOptions.map((need) => {\n        let queryParam = `${need}Â£`;\n        queryParams = queryParams.concat(queryParam);\n      });\n\n      nodeServer\n        .get(`/charities?tags=${queryParams}`)\n        .then((res) => {\n          const charities = res.data;\n          // sorts charities alphabetically\n          charities.sort((a, b) => a.OrgName.localeCompare(b.OrgName));\n          setCharities(charities);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  // QUESTION 2 - Support Types:\n\n  const getSupportTypes = () => {\n    nodeServer.get(\"/types\").then((res) => {\n      const supportTypesResponse = res.data;\n\n      const uniqueSupportTypes = [\n        ...new Set(\n          supportTypesResponse.map((supportType) => supportType.UserOption_Type)\n        ),\n      ];\n\n      setAllSupportTypes(uniqueSupportTypes);\n    });\n  };\n\n  const handleSupportTypesCompleted = (selectedOptions) => {\n    setSelectedSupportTypes(selectedOptions);\n    trackEvent(\"Support Types\", selectedOptions)\n    getPersonalisations();\n    history.push(\"/personalise\");\n  };\n\n  // QUESTION 3 - Personalisations:\n\n  const getPersonalisations = () => {\n    nodeServer.get(\"/personalisations\").then((res) => {\n      const personalisationsResponse = res.data\n        .map((personalisation) => personalisation.UserOption)\n        .filter((personalisation) => personalisation != \"\");\n      setAllPersonalisations(personalisationsResponse);\n    });\n  };\n\n  const handlePersonalisationsCompleted = (selectedOptions) => {\n    setSelectedPersonalisations(selectedOptions);\n    trackEvent(\"Personalisations\", selectedOptions)\n    history.push(\"/postcode\");\n  };\n\n  // QUESTION 4 - Postcode:\n\n  const handlePostcodeSearchCompleted = (text) => {\n    if (text === \"Enter your postcode\") {\n      text = \"\";\n    }\n    setPostcode(text);\n    history.push(\"/results\");\n  };\n\n  return (\n    <>\n      <TelemetryProvider instrumentationKey=\"__instrumentationKey__\" after={() => { appInsights = getAppInsights() }}>\n        <Switch>\n          <Route exact path=\"/\">\n            <MultiChoiceQuestion\n              optionsList={allNeeds}\n              onComplete={handleNeedsCompleted}\n              questionTitle=\"What can we help you with?\"\n              selected={selectedNeeds}\n            />\n          </Route>\n          <Route exact path=\"/service-types\">\n            <MultiChoiceQuestion\n              optionsList={allSupportTypes}\n              onComplete={handleSupportTypesCompleted}\n              questionTitle=\"What types of support are you looking for?\"\n              onBackClicked={onBackClicked}\n              backgroundToUse=\"two\"\n              selected={selectedSupportTypes}\n            />\n          </Route>\n          <Route exact path=\"/personalise\">\n            <MultiChoiceQuestion\n              optionsList={allPersonalisations}\n              onComplete={handlePersonalisationsCompleted}\n              questionTitle=\"Personalise your results\"\n              onBackClicked={onBackClicked}\n              backgroundToUse=\"three\"\n              selected={selectedPersonalisations}\n            />\n          </Route>\n          <Route exact path=\"/postcode\">\n            <TextBoxQuestion\n              onComplete={handlePostcodeSearchCompleted}\n              onBackClicked={onBackClicked}\n              backgroundToUse=\"four\"\n              postcode={postcode}\n            />\n          </Route>\n          <Route exact path=\"/results\">\n            <Results\n              onBackClicked={onBackClicked}\n              selectedNeeds={selectedNeeds}\n              selectedSupportTypes={selectedSupportTypes}\n              selectedPersonalisations={selectedPersonalisations}\n              postcode={postcode}\n              charities={charities}\n            />\n\n          </Route>\n        </Switch>\n      </TelemetryProvider>\n    </>\n  );\n};\n\nexport default withRouter(HomePageContainer);\n","/Users/steven/STA/miricyl/client/src/components/MultiChoiceQuestion.js",["63","64","65"],"import React, { useState, useEffect } from \"react\";\nimport \"../styles/global.css\";\nimport { IoIosArrowDropleft } from \"react-icons/io\";\n\nconst MultiChoiceQuestion = ({\n  optionsList,\n  onComplete,\n  questionTitle,\n  onBackClicked,\n  selected,\n  backgroundToUse = \"one\",\n}) => {\n  const [options, setOptions] = useState([]);\n\n  const handleOptionClicked = (selectedOption) => {\n    const indexOfSelectedOption = options.findIndex(\n      (option) => option == selectedOption\n    );\n\n    const toggledOption = {\n      ...selectedOption,\n      isSelected: !selectedOption.isSelected,\n    };\n\n    const startOfArray = options.slice(0, indexOfSelectedOption);\n    const endOfArray = options.slice(indexOfSelectedOption + 1);\n\n    setOptions([...startOfArray, toggledOption, ...endOfArray]);\n  };\n\n  useEffect(() => {\n    const optionsListForDisplay = optionsList.map((option) => {\n\n      // check if selected\n      var isSelected = false;\n      selected.map((value) => {\n\n        if (value === option) {\n          isSelected = true;\n        }\n      });\n      return { value: option, isSelected: isSelected };\n    });\n    setOptions(optionsListForDisplay);\n  }, [optionsList]);\n\n  const OptionsList = () => {\n    return options.map((option) => {\n      var isSelected = option.isSelected;\n      return (\n        <button\n          onClick={() => handleOptionClicked(option)}\n          className={\n            isSelected ? \"question-button-selected\" : \"question-button\"\n          }\n          value={option.value}\n          key={option.value}\n          id={option.value}\n        >\n          {option.value}\n        </button>\n      );\n    });\n  };\n\n  return (\n    <div className={`question-${backgroundToUse}-container`}>\n      <div className=\"question-grid-container\">\n        <div className=\"title-description-container\">\n          <h1 className=\"question-title\">\n            Search mental health resources & services that can help you feel\n            better\n          </h1>\n          <h2 className=\"question-page-detail-text\">\n            Boost is here for you if you need trusted guidance on accessing\n            resources and services that can positively impact your mental\n            health. We will guide you in finding the treatment and help you\n            need.\n          </h2>\n        </div>\n\n        <div>\n          <div className=\"select-container\">\n            <p className=\"question-text\">{questionTitle}</p>\n            <p className=\"question-subtext\">select all that apply</p>\n\n            <OptionsList />\n\n            <br />\n          </div>\n          <div className=\"bottom-navigation\">\n            {onBackClicked && (\n              <IoIosArrowDropleft\n                className=\"back-button\"\n                onClick={onBackClicked}\n              />\n            )}\n            <button\n              className=\"next-button\"\n              onClick={() =>\n                onComplete(\n                  options\n                    .filter((option) => option.isSelected)\n                    .map((option) => option.value)\n                )\n              }\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultiChoiceQuestion;\n","/Users/steven/STA/miricyl/client/src/components/TextBoxQuestion.js",["66"],"import React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { IoIosArrowDropleft } from \"react-icons/io\";\nimport \"../styles/global.css\";\n\nconst TextBoxQuestion = ({\n  onComplete,\n  onBackClicked,\n  backgroundToUse = \"one\",\n  postcode,\n}) => {\n  const [text, setText] = useState(\"\");\n  const checkPostcode = () => {\n    if (postcode) {\n      setText(`${postcode}`);\n    }\n  };\n\n  useEffect(() => {\n    checkPostcode();\n  }, []);\n  const handleChange = (e) => {\n    setText(e.target.value);\n  };\n\n  return (\n    <div className={`question-${backgroundToUse}-container`}>\n      <div className=\"question-grid-container\">\n        <div className=\"title-description-container\">\n          <h1 className=\"question-title\">\n            Search mental health resources & services that can help you feel\n            better\n          </h1>\n          <h2 className=\"question-page-detail-text\">\n            Boost is here for you if you need trusted guidance on accessing\n            resources and services that can positively impact your mental\n            health. We will guide you in finding the treatment and help you\n            need.\n          </h2>\n        </div>\n        <div>\n          <div className=\"select-container-q4\">\n            <p className=\"question-text\">\n              Enter the first part of your postcode to find services and support\n              in your area\n            </p>\n\n            <input\n              className=\"postcode-select\"\n              type=\"text\"\n              value={text}\n              onChange={handleChange}\n              placeholder=\"Enter your postcode\"\n            ></input>\n\n            <br />\n          </div>\n\n          <div className=\"bottom-navigation\">\n            {onBackClicked && (\n              <IoIosArrowDropleft\n                className=\"back-button\"\n                onClick={onBackClicked}\n              />\n            )}\n            <button className=\"next-button\" onClick={() => onComplete(text)}>\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(TextBoxQuestion);\n","/Users/steven/STA/miricyl/client/src/components/Results.js",["67","68","69","70","71","72","73","74","75","76","77","78"],"/Users/steven/STA/miricyl/client/src/api/GoogleServer.js",[],["79","80"],"/Users/steven/STA/miricyl/client/src/api/nodeServer.js",[],"/Users/steven/STA/miricyl/client/src/telemetry/TelemetryService.js",[],"/Users/steven/STA/miricyl/client/src/telemetry/telemetry-provider.jsx",[],"/Users/steven/STA/miricyl/client/src/api/postcodeServer.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":78,"column":34,"nodeType":"87","messageId":"88","endLine":78,"endColumn":36},{"ruleId":"89","severity":1,"message":"90","line":126,"column":54,"nodeType":"91","messageId":"92","endLine":126,"endColumn":56},{"ruleId":"89","severity":1,"message":"93","line":19,"column":26,"nodeType":"91","messageId":"92","endLine":19,"endColumn":28},{"ruleId":"85","severity":1,"message":"86","line":38,"column":28,"nodeType":"87","messageId":"88","endLine":38,"endColumn":30},{"ruleId":"94","severity":1,"message":"95","line":47,"column":6,"nodeType":"96","endLine":47,"endColumn":19,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"98","line":21,"column":6,"nodeType":"96","endLine":21,"endColumn":8,"suggestions":"99"},{"ruleId":"94","severity":1,"message":"100","line":27,"column":6,"nodeType":"96","endLine":27,"endColumn":8,"suggestions":"101"},{"ruleId":"94","severity":1,"message":"102","line":31,"column":6,"nodeType":"96","endLine":31,"endColumn":20,"suggestions":"103"},{"ruleId":"89","severity":1,"message":"93","line":72,"column":54,"nodeType":"91","messageId":"92","endLine":72,"endColumn":56},{"ruleId":"85","severity":1,"message":"86","line":94,"column":41,"nodeType":"87","messageId":"88","endLine":94,"endColumn":43},{"ruleId":"85","severity":1,"message":"104","line":95,"column":47,"nodeType":"87","messageId":"88","endLine":95,"endColumn":49},{"ruleId":"89","severity":1,"message":"90","line":117,"column":74,"nodeType":"91","messageId":"92","endLine":117,"endColumn":76},{"ruleId":"89","severity":1,"message":"93","line":147,"column":18,"nodeType":"91","messageId":"92","endLine":147,"endColumn":20},{"ruleId":"89","severity":1,"message":"93","line":173,"column":25,"nodeType":"91","messageId":"92","endLine":173,"endColumn":27},{"ruleId":"105","severity":1,"message":"106","line":263,"column":40,"nodeType":"107","endLine":263,"endColumn":55},{"ruleId":"108","severity":1,"message":"109","line":264,"column":13,"nodeType":"110","endLine":264,"endColumn":69},{"ruleId":"105","severity":1,"message":"106","line":274,"column":44,"nodeType":"107","endLine":274,"endColumn":59},{"ruleId":"105","severity":1,"message":"106","line":323,"column":44,"nodeType":"107","endLine":323,"endColumn":59},{"ruleId":"81","replacedBy":"111"},{"ruleId":"83","replacedBy":"112"},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selected'. Either include it or remove the dependency array.","ArrayExpression",["115"],"React Hook useEffect has a missing dependency: 'checkPostcode'. Either include it or remove the dependency array.",["116"],"React Hook useEffect has a missing dependency: 'constructCharityObjects'. Either include it or remove the dependency array.",["117"],"React Hook useEffect has a missing dependency: 'sortCharities'. Either include it or remove the dependency array.",["118"],"Array.prototype.filter() expects a return value from arrow function.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["113"],["114"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [optionsList, selected]",{"range":"127","text":"128"},"Update the dependencies array to be: [checkPostcode]",{"range":"129","text":"130"},"Update the dependencies array to be: [constructCharityObjects]",{"range":"131","text":"132"},"Update the dependencies array to be: [allCharities, sortCharities]",{"range":"133","text":"134"},[1203,1216],"[optionsList, selected]",[469,471],"[checkPostcode]",[890,892],"[constructCharityObjects]",[942,956],"[allCharities, sortCharities]"]